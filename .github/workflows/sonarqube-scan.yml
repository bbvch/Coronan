---
name: SonarQube analysis

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    workflow_dispatch:

permissions:
    pull-requests: read # allows SonarQube to decorate PRs with analysis results

jobs:
    Analysis:
        runs-on: ubuntu-latest
        env:
            BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
            BUILD_TYPE: Debug
            WITH_COVERAGE: ON
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

            - name: Install dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y --no-install-recommends ninja-build ${{ matrix.clang-tidy }} dpkg pkg-config doxygen lcov
                  sudo apt-get install -y --no-install-recommends qt6-base-dev qt6-tools-dev qt6-tools-dev-tools libqt6charts6 libqt6charts6-dev libqt6opengl6 libqt6opengl6-dev '^libxcb.*-dev' libgles2-mesa-dev libx11-xcb-dev libgl1-mesa-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: 3.x
            - name: Install python dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r py-requirements.txt
            - name: Install Build Wrapper
              uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v4
            - name: Set conan compiler env
              run: conan profile detect
            - name: conan install
              run: conan install . --build=missing --settings=build_type=${{ env.BUILD_TYPE }} --settings=compiler.cppstd=17
            - name: CMake configure
              run: cmake -S . -B ./build -G Ninja -DENABLE_COVERAGE=${{ env.WITH_COVERAGE }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
            - name: Run Build Wrapper
              run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config ${{ env.BUILD_TYPE }}
            - name: Collect coverage into one XML report
              if: env.WITH_COVERAGE == 'ON'
              run: |
                  gcovr --sonarqube > coverage.xml
            - name: SonarQube Scan
              uses: SonarSource/sonarqube-scan-action@v4
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Generate a token on SonarQube, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
              with:
                  # Additional arguments for the sonarcloud scanner
                  args: >
                      --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
                      --define sonar.coverageReportPaths=coverage.xml
