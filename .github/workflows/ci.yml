---
name: CI

on:
    push:
    pull_request:
    release:
        types: [published]

jobs:
    ci:
        name: ${{ matrix.name }}
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                include:
                    - name: ubuntu-18.04-gcc-7
                      os: ubuntu-18.04
                      build_type: Release
                      compiler: g++-7
                      ccompiler: gcc-7
                      clang-tidy: ''
                      generators: Ninja
                      coverage: OFF
                    - name: ubuntu-18.04-gcc-9
                      os: ubuntu-18.04
                      build_type: Release
                      compiler: g++-9
                      ccompiler: gcc-9
                      clang-tidy: ''
                      generators: Ninja
                      coverage: OFF
                    - name: ubuntu-18.04-clang-9
                      os: ubuntu-18.04
                      build_type: Release
                      compiler: clang++-9
                      ccompiler: clang-9
                      clang-tidy: clang-tidy-9
                      generators: Ninja
                      coverage: OFF
                    - name: ubuntu-20.04-gcc-9
                      os: ubuntu-20.04
                      build_type: Release
                      compiler: g++-9
                      ccompiler: gcc-9
                      clang-tidy: clang-tidy
                      generators: Ninja
                      coverage: OFF
                    - name: ubuntu-20.04-gcc-10
                      os: ubuntu-20.04
                      build_type: Debug
                      compiler: g++-10
                      ccompiler: gcc-10
                      clang-tidy: clang-tidy
                      generators: Ninja
                      coverage: ON
                    - name: ubuntu-20.04-clang-10
                      os: ubuntu-20.04
                      build_type: Release
                      compiler: clang++-10
                      ccompiler: clang-10
                      clang-tidy: clang-tidy-10
                      generators: Ninja
                      coverage: OFF
                    - name: ubuntu-20.04-clang-11
                      os: ubuntu-20.04
                      build_type: Release
                      compiler: clang++-11
                      ccompiler: clang-11
                      clang-tidy: clang-tidy-11
                      generators: Ninja
                      coverage: OFF
                    - name: ubuntu-20.04-clang-12
                      os: ubuntu-20.04
                      build_type: Release
                      compiler: clang++-12
                      ccompiler: clang-12
                      clang-tidy: clang-tidy-12
                      generators: Ninja
                      coverage: OFF
                    - name: windows-VS-2019
                      os: windows-2019
                      build_type: Release
                      compiler: cl
                      ccompiler: cl
                      generators: Visual Studio 16 2019
                      coverage: OFF
                    - name: windows-VS-2022
                      os: windows-2022
                      build_type: Release
                      compiler: cl
                      ccompiler: cl
                      generators: Visual Studio 17 2022
                      coverage: OFF
                    - name: macos-10.15-clang
                      os: macos-10.15
                      build_type: Release
                      compiler: clang++
                      ccompiler: clang
                      generators: Unix Makefiles
                      coverage: OFF
                    - name: macos-11-clang
                      os: macos-11
                      build_type: Release
                      compiler: clang++
                      ccompiler: clang
                      generators: Unix Makefiles
                      coverage: OFF

        env:
            CXX: ${{ matrix.compiler }}
            CC: ${{ matrix.ccompiler }}

        steps:
            - uses: actions/checkout@v2
            - name: Install dependencies (Linux)
              if: runner.os == 'Linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y --no-install-recommends ninja-build ${{ matrix.clang-tidy }} python3-pip python3-setuptools libqt5charts5-dev libglib2.0-dev
                  sudo apt-get install -y --no-install-recommends dpkg pkg-config doxygen lcov
            - name: Install dependencies (macOS)
              if: runner.os == 'macOS'
              run: |
                  brew install ninja doxygen
            - name: Install dependencies (Windows)
              if: runner.os == 'Windows'
              run: |
                  choco install ninja cmake doxygen.install
            - name: Python pip Cache (Linux)
              if: runner.os == 'Linux'
              uses: actions/cache@v2
              with:
                  path: ~/.cache/pip
                  key: pip-${{ matrix.name }}-${{ hashFiles('py-requirements.txt') }}
            - name: Python pip Cache (MacOS)
              if: runner.os == 'macOS'
              uses: actions/cache@v2
              with:
                  path: ~/Library/Caches/pip
                  key: pip-${{ matrix.name }}-${{ hashFiles('py-requirements.txt') }}
            - name: Python pip Cache (Windows)
              if: runner.os == 'Windows'
              uses: actions/cache@v2
              with:
                  path: C:/Users/runneradmin/appdata/local/pip/cache
                  key: pip-${{ matrix.name }}-${{ hashFiles('py-requirements.txt') }}
            - name: Install python dependencies
              run: |
                  python3 -m pip install --upgrade pip
                  python3 -m pip install -r py-requirements.txt
            - name: Install Qt (MacOS)
              if: runner.os == 'macOS'
              uses: jurplel/install-qt-action@v2
              with:
                  version: 5.15.2
                  host: mac
                  target: desktop
                  modules: qtcharts
                  tools: tools_ifw,4.0,qt.tools.ifw.40
            - name: Install Qt (Windows)
              if: runner.os == 'Windows'
              uses: jurplel/install-qt-action@v2
              with:
                  version: 5.15.2
                  host: windows
                  target: desktop
                  modules: qtcharts
                  tools: tools_ifw,4.0,qt.tools.ifw.40
            - name: Conan Cache
              if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
              uses: actions/cache@v2
              with:
                  path: ~/.conan/data
                  key: conan-${{ matrix.name }}-${{ hashFiles('**/Conan.cmake') }}
            - name: Conan Cache (Windows)
              if: runner.os == 'Windows'
              uses: actions/cache@v2
              with:
                  path: |
                      C:/Users/runneradmin/.conan/data
                  key: conan-${{ matrix.name }}-${{ hashFiles('**/Conan.cmake') }}
            - name: Set conan compiler env (gcc)
              if: matrix.ccompiler == 'gcc'
              run: |
                  conan profile new default --detect
                  conan profile update settings.compiler.libcxx=libstdc++11 default
            - name: Create build dir
              run: mkdir build
            - name: CMake configure
              run: cmake -S . -B ./build -G "${{ matrix.generators }}" -DENABLE_COVERAGE=${{ matrix.coverage }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type
                  }}
            - name: CMake build
              run: cmake --build ./build --config ${{ matrix.build_type }}
            - name: CTest
              run: ctest -C Debug
              working-directory: ./build
            - name: CMake build docs
              run: cmake --build ./build --target docs --config ${{ matrix.build_type }}
            - name: CMake build package
              run: cmake --build ./build --target package --config ${{ matrix.build_type }}
            - name: Coverage
              if: matrix.coverage == 'ON'
              run: |
                  lcov --capture --directory . --output-file coverage.info
                  lcov --remove coverage.info '/usr/*' --output-file coverage.info
                  bash <(curl -s https://codecov.io/bash) -f coverage.info || echo 'Codecov did not collect coverage reports'
                  export CODACY_PROJECT_TOKEN=${{ secrets.CODACY_PROJECT_TOKEN }}
                  bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.info || echo 'codacy did not collect coverage reports'
            - uses: actions/upload-artifact@v2
              with:
                  name: ${{ matrix.name }}-artifacts
                  path: |
                      ./build/Coronan-*.zip
                      ./build/Coronan-*.msi
                      ./build/Coronan-*.tar.gz
                      ./build/Coronan-*.pkg
